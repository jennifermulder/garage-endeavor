{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jennifer.mulder\\\\Desktop\\\\projects\\\\garage-endeavor\\\\client\\\\src\\\\pages\\\\Detail.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\nimport { idbPromise } from \"../utils/helpers\"; // import { idbPromise } from \"../../utils/helpers\";\n\nimport spinner from '../assets/spinner.gif';\nimport Cart from '../components/Cart';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const {\n    id\n  } = useParams();\n  const [currentProduct, setCurrentProduct] = useState({}); // passing the _id value of product selected to the useQuery() Hook and displaying the response to the page.\n\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS); // const products = data?.products || [];\n  // useEffect(() => {\n  //   if (products.length) {\n  //     setCurrentProduct(products.find(product => product._id === id));\n  //   }\n  // }, [products, id]);\n\n  const {\n    products,\n    cart\n  } = state; //update global state, update in Indexeddb\n\n  const addToCart = () => {\n    const itemInCart = cart.find(cartItem => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      }); // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n\n      idbPromise('cart', 'put', { ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct,\n          purchaseQuantity: 1\n        }\n      }); // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n\n      idbPromise('cart', 'put', { ...currentProduct,\n        purchaseQuantity: 1\n      });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    }); // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n\n    idbPromise('cart', 'delete', { ...currentProduct\n    });\n  };\n\n  useEffect(() => {\n    //already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id)); //data returned from useQuery Hook\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } // get cache from idb\n    else if (!loading) {\n        idbPromise('products', 'get').then(indexedProducts => {\n          dispatch({\n            type: UPDATE_PRODUCTS,\n            products: indexedProducts\n          });\n        });\n      }\n  }, [products, data, loading, dispatch, id]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, currentProduct ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"\\u2190 Back to Products\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, currentProduct.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, currentProduct.description), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"Price:\"), \"$\", currentProduct.price, \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addToCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"Add to Cart\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !cart.find(p => p._id === currentProduct._id),\n    onClick: removeFromCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, \"Remove from Cart\")), /*#__PURE__*/React.createElement(\"img\", {\n    src: `/images/${currentProduct.image}`,\n    alt: currentProduct.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  })) : null, loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 19\n    }\n  }) : null, /*#__PURE__*/React.createElement(Cart, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }));\n}\n\n;\nexport default Detail;","map":{"version":3,"sources":["C:/Users/jennifer.mulder/Desktop/projects/garage-endeavor/client/src/pages/Detail.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","QUERY_PRODUCTS","useStoreContext","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","ADD_TO_CART","UPDATE_PRODUCTS","idbPromise","spinner","Cart","Detail","state","dispatch","id","currentProduct","setCurrentProduct","loading","data","products","cart","addToCart","itemInCart","find","cartItem","_id","type","purchaseQuantity","parseInt","product","removeFromCart","length","forEach","then","indexedProducts","name","description","price","p","image"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { idbPromise } from \"../utils/helpers\";\n// import { idbPromise } from \"../../utils/helpers\";\nimport spinner from '../assets/spinner.gif'\n\nimport Cart from '../components/Cart';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n  // passing the _id value of product selected to the useQuery() Hook and displaying the response to the page.\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  // const products = data?.products || [];\n\n  // useEffect(() => {\n  //   if (products.length) {\n  //     setCurrentProduct(products.find(product => product._id === id));\n  //   }\n  // }, [products, id]);\n\n\n  const { products, cart } = state;\n  //update global state, update in Indexeddb\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  useEffect(() => {\n    //already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n      //data returned from useQuery Hook\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>\n              Add to Cart\n            </button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;\n"]},"metadata":{},"sourceType":"module"}