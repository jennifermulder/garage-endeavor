{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jennifer.mulder\\\\Desktop\\\\projects\\\\garage-endeavor\\\\client\\\\src\\\\utils\\\\GlobalState.js\";\n//instantiate a new Context object - create container to hold global state. useContext = use state created from createContext\nimport React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers';\nconst StoreContext = createContext(); //deconstruct the context created. Context = { Provider (wrap application to accept props), Consumer (grab and use data from Provider)}\n\nconst {\n  Provider\n} = StoreContext; //\"custom\" Provider component\n\nconst StoreProvider = ({\n  value = [],\n  ...props\n}) => {\n  const [state, dispatch] = useProductReducer({\n    //instantiate initial global state\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: ''\n  }); // use this to confirm it works!\n\n  console.log(state); //return when useProductReducer is run. Need to return props or nothing will render\n\n  return /*#__PURE__*/React.createElement(Provider, Object.assign({\n    value: [state, dispatch]\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }\n  }));\n}; // When executed from within a component, we will receive the [state, dispatch] provided by StoreProvider\n\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","map":{"version":3,"sources":["C:/Users/jennifer.mulder/Desktop/projects/garage-endeavor/client/src/utils/GlobalState.js"],"names":["React","createContext","useContext","useProductReducer","StoreContext","Provider","StoreProvider","value","props","state","dispatch","products","cart","cartOpen","categories","currentCategory","console","log","useStoreContext"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,SAASC,iBAAT,QAAkC,YAAlC;AAEA,MAAMC,YAAY,GAAGH,aAAa,EAAlC,C,CACA;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAeD,YAArB,C,CAEA;;AACA,MAAME,aAAa,GAAG,CAAC;AAAEC,EAAAA,KAAK,GAAG,EAAV;AAAc,KAAGC;AAAjB,CAAD,KAA8B;AAClD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,iBAAiB,CAAC;AAC1C;AACAQ,IAAAA,QAAQ,EAAE,EAFgC;AAG1CC,IAAAA,IAAI,EAAE,EAHoC;AAI1CC,IAAAA,QAAQ,EAAE,KAJgC;AAK1CC,IAAAA,UAAU,EAAE,EAL8B;AAM1CC,IAAAA,eAAe,EAAE;AANyB,GAAD,CAA3C,CADkD,CASlD;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ,EAVkD,CAWlD;;AACA,sBAAO,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,CAACA,KAAD,EAAQC,QAAR;AAAjB,KAAwCF,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAbD,C,CAeA;;;AACA,MAAMU,eAAe,GAAG,MAAM;AAC5B,SAAOhB,UAAU,CAACE,YAAD,CAAjB;AACD,CAFD;;AAIA,SAASE,aAAT,EAAwBY,eAAxB","sourcesContent":["//instantiate a new Context object - create container to hold global state. useContext = use state created from createContext\nimport React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\n//deconstruct the context created. Context = { Provider (wrap application to accept props), Consumer (grab and use data from Provider)}\nconst { Provider } = StoreContext;\n\n//\"custom\" Provider component\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    //instantiate initial global state\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n  });\n  // use this to confirm it works!\n  console.log(state);\n  //return when useProductReducer is run. Need to return props or nothing will render\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\n// When executed from within a component, we will receive the [state, dispatch] provided by StoreProvider\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };"]},"metadata":{},"sourceType":"module"}